<?php

namespace Tests\API;

use App\Models\Request;
use Spatie\MediaLibrary\MediaCollections\Exceptions\FileCannotBeAdded;
use Spatie\MediaLibrary\MediaCollections\Exceptions\FileDoesNotExist;
use Spatie\MediaLibrary\MediaCollections\Exceptions\FileIsTooBig;
use Tests\TestCase;
use Tests\Traits\HasCreatedRequest;
use Tests\Traits\HasNotFoundedRequest;
use Tests\Traits\HasRequestData;

class UpdateRequestTest extends TestCase
{
    use HasCreatedRequest, HasRequestData, HasNotFoundedRequest;

    /**
     * @var Request
     */
    private Request $request;

    /**
     * @throws FileCannotBeAdded
     * @throws FileDoesNotExist
     * @throws FileIsTooBig
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->request = $this->getCreatedRequest();
    }

    /**
     * @test Проверка на успешное обновление заявки
     */
    public function test_successful_updating_request()
    {
        $uri = "/api/requests/{$this->request->id}";
        $response = $this->patchJson($uri, $this->getRequestData());
        $response->assertStatus(200);
    }

    /**
     * @test Проверка на неверное создание заявки
     */
    public function test_wrong_updating_request()
    {
        $uri = "/api/requests/{$this->request->id}";
        $response = $this->patchJson($uri, []);
        $response->assertStatus(422);
    }

    /**
     * @test Проверка на создание несуществующей заявки
     */
    public function test_wrong_updating_not_founded_request()
    {
        $uri = "/api/requests/{$this->getNotFoundedID()}";
        $response = $this->patchJson($uri, $this->getRequestData());
        $response->assertStatus(404);
    }
}
